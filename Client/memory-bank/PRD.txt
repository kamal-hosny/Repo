# Product Requirements Document (PRD) - Task-Flow Project

**Version:** 1.0
**Date:** June 24, 2025

---

### 1.0 Overview

"Task-Flow" is a comprehensive and advanced Learning Management System (LMS) designed specifically for university-level institutions. The system aims to provide an integrated digital environment that facilitates interaction and management of academic tasks among the administration, teachers, and students within a university and its various colleges.

### 2.0 Product Goals

* To provide a centralized platform for managing academic courses, assignments, and grades.
* To facilitate effective communication between students, teachers, and administration.
* To automate routine academic processes to increase efficiency.
* To provide a clear and relevant view for each user based on their role and permissions.

### 3.0 User Roles / Personas

The system includes four primary roles with specific permissions:

1.  **Student:** The end-user of the system who receives educational materials and submits assignments.
2.  **Teacher:** This role includes (Doctor, Assistant, Teacher). They are responsible for creating educational content and evaluating students.
3.  **Admin:** A manager at the college or department level. Responsible for managing teacher and student accounts within their scope.
4.  **Super Admin:** The highest-level administrator for the entire university system, possessing all permissions, including the management of other Admin accounts.

### 4.0 Features & Functional Requirements

#### 4.1 Authentication System
* A login page (`/login`) for authentication using credentials (e.g., university email/ID and password).
* After a successful login, the user is automatically redirected to their main dashboard based on their role.

#### 4.2 Main Dashboards
* **Student Dashboard (`/student/:id`):**
    * Displays personal information.
    * A navigation bar containing:
        * **My Courses:** A list of enrolled courses and the teachers for each course.
        * **Assignments:** Displays required assignments, their due dates, and their status (Submitted, Pending).
        * **Grades:** Shows grades received for assignments and exams.
        * **Calendar:** Displays important events like exam schedules and final assignment due dates.
* **Teacher Dashboard (`/teacher/:id`):**
    * Displays personal information.
    * Shows upcoming lectures.
    * A list of all their students across different courses.
    * Ability to navigate to a specific student's profile to review their assignments and grades.
    * Tools to create and manage courses and assignments.
* **Admin Dashboard (`/admin/:id`):**
    * Displays a list of all teachers and students within their scope (e.g., their college).
    * Shows the online/offline status of users.
    * Ability to add, edit, and delete teacher and student accounts.
    * Clicking on a teacher or student displays their profile and details (e.g., students attached to a teacher).
* **Super Admin Dashboard (`/superadmin/:id`):**
    * Possesses all the capabilities of a regular Admin.
    * Additionally, can manage other Admin accounts (Create, Read, Update, Delete).
    * Has access to main system settings.

#### 4.3 Task & Assignment Management
* **Create Task (by Teacher):** A task must include the following fields:
    * Title
    * Description
    * Due Date
    * Degree (Grade/Points)
    * Ability to attach files (Attached Files)
* **Submit Task (by Student):**
    * A field for uploading work files (File Upload Field).
    * Ability to edit the submission before the deadline.
* **Review Task (by Teacher):**
    * View student submissions.
    * Enter a grade.
    * Add feedback or comments.

#### 4.4 Real-time Notifications
* The system must display instant notifications to users for important events.
* This will be handled by connecting to a `socket endpoint` provided by the backend team.
* Notification examples: (New assignment posted, Due date approaching, New grade received).

### 5.0 Frontend Requirements

#### 5.1 Technology Stack
* **Framework:** Next.js

#### 5.2 Design (UX/UI)
* A pre-existing UX/UI design is available.
* The frontend team must strictly adhere to the approved design to ensure a consistent user experience.
* **Theme Support:** The system must support both light and dark modes with seamless switching.
* **Internationalization:** The system must support Arabic (AR) and English (EN) languages with proper RTL/LTR layout handling.

#### 5.3 Key Pages & Routes
* `/` (Landing Page): The main informational page before logging in.
* `/login`: The login page.
* `/student/:id`: Student's personal dashboard/profile.
* `/teacher/:id`: Teacher's personal dashboard/profile.
* `/admin/:id`: Admin's personal dashboard/profile.
* `/superadmin/:id`: Super Admin's personal dashboard/profile.
* `/students`, `/teachers`, `/admins`: Pages for listing users (visibility based on viewer's permissions).
* Additional pages as needed (e.g., specific course page, specific assignment page, etc.).

#### 5.4 Cross-Platform Features
* **Theme Toggle:** A theme switcher component accessible from all pages allowing users to toggle between light and dark modes. User preference should be persisted across sessions.
* **Language Switcher:** A language selector component accessible from all pages enabling users to switch between Arabic and English. The interface must automatically adjust layout direction (RTL for Arabic, LTR for English).
* **Responsive Layout:** All pages must adapt to the selected language's text direction and maintain proper spacing, alignment, and component positioning.
* **Persistent Preferences:** Both theme and language preferences must be stored locally and maintained across user sessions.

### 6.0 Assumptions
* The backend team (Express.js) will provide all required APIs and their documentation.
* A `socket endpoint` will be provided by the backend to enable real-time notifications.
* The initial creation of the "University" entity and the first "Super Admin" account is a one-time setup process done when delivering the project, not a user-facing feature.

### 7.0 Out of Scope
* Billing or subscription management systems.
* Creation of a new "University" account through the public interface.
* User-side customization of the interface design.

---
**End of Document**